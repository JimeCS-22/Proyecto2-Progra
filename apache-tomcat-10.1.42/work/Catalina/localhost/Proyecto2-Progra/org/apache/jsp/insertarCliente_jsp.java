/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-07-01 05:15:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import cr.ac.ucr.paraiso.proyecto2.progra.domain.Cliente;

public final class insertarCliente_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("cr.ac.ucr.paraiso.proyecto2.progra.domain.Cliente");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n");
      out.write("    \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("\n");
      out.write("<f:view>\n");
      out.write("    <html>\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <title>Drive Repair-Insertar Cliente</title>\n");
      out.write("       <style>\n");
      out.write("       body { font-family: Arial, sans-serif; margin: 20px; }\n");
      out.write("        h1 { color: #333; }\n");
      out.write("        form { background-color: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n");
      out.write("        label { font-weight: bold; margin-top: 10px; display: block; }\n");
      out.write("        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n");
      out.write("        input[type=\"text\"], input[type=\"date\"], select, textarea {\n");
      out.write("            width: calc(100% - 22px);\n");
      out.write("            padding: 10px;\n");
      out.write("            margin-top: 5px;\n");
      out.write("            margin-bottom: 15px;\n");
      out.write("            border: 1px solid #ddd;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("        input[type=\"submit\"], button {\n");
      out.write("            background-color: #4CAF50;\n");
      out.write("            color: white;\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 4px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-size: 16px;\n");
      out.write("            margin-right: 10px;\n");
      out.write("        }\n");
      out.write("        button.add-detail-btn {\n");
      out.write("            background-color: #007bff;\n");
      out.write("        }\n");
      out.write("        .message {\n");
      out.write("            padding: 10px;\n");
      out.write("            margin-bottom: 15px;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        .message.success {\n");
      out.write("            background-color: #d4edda;\n");
      out.write("            color: #155724;\n");
      out.write("            border-color: #c3e6cb;\n");
      out.write("        }\n");
      out.write("        .message.error {\n");
      out.write("            background-color: #f8d7da;\n");
      out.write("            color: #721c24;\n");
      out.write("            border-color: #f5c6cb;\n");
      out.write("        }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <h1>Insertar Clientes</h1>\n");
      out.write("  <div class=\"form-container\">\n");
      out.write("<form action=\"InsertarClienteServlet\" method=\"post\">\n");
      out.write("   <div>\n");
      out.write("        <label for=\"idCliente\">ID Cliente:</label>\n");
      out.write("        <input id=\"idCliente\" name=\"idCliente\" type=\"text\" required>\n");
      out.write("   </div>\n");
      out.write("    <div>\n");
      out.write("        <label for=\"nombre\">Nombre Completo: </label>\n");
      out.write("        <input id=\"nombre\" name=\"nombre\" type=\"text\" required>\n");
      out.write("   </div>\n");
      out.write("   <div>\n");
      out.write("        <label for=\"telefono\">Teléfono :</label>\n");
      out.write("        <input id=\"telefono\" name=\"telefono\" type=\"text\" required>\n");
      out.write("    </div>\n");
      out.write("    <div>\n");
      out.write("        <label for=\"celular\">Celular :</label>\n");
      out.write("        <input id=\"celular\" name=\"celular\" type=\"text\" required>\n");
      out.write("    </div>\n");
      out.write("  \n");
      out.write("    <div>\n");
      out.write("        <label for=\"direccion\">Dirección :</label>\n");
      out.write("        <input id=\"direccion\" name=\"direccion\" type=\"text\" required>\n");
      out.write("    </div>\n");
      out.write("  <button type=\"submit\">Insertar</button>\n");
      out.write("  <button type=\"submit\">Actualizar</button>\n");
      out.write("  </form>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("  <h2>Registro Clientes</h2>\n");
      out.write("    <form action=\"InsertarClienteServlet\" method=\"get\">\n");
      out.write("  <table border=\"1\">\n");
      out.write("    <thead>\n");
      out.write("      <tr>\n");
      out.write("        <th>ID</th>\n");
      out.write("        <th>Nombre</th>\n");
      out.write("        <th>N.Teléfono</th>\n");
      out.write("        <th>N.Celular</th>\n");
      out.write("         <th>Domicilio</th>\n");
      out.write("      </tr>\n");
      out.write("    </thead>\n");
      out.write("    <tbody>\n");
      out.write("      ");

        List<Cliente> clientes = (List<Cliente>) request.getAttribute("clientes");
      if (clientes != null && !clientes.isEmpty()) {
          for (Cliente cliente : clientes) {
      
      out.write("\n");
      out.write("        <tr>\n");
      out.write("          <td>");
      out.print( cliente.getIdCliente() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print( cliente.getNombre() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print( cliente.getTelefono() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print( cliente.getCelular() );
      out.write("</td>\n");
      out.write("          <td>");
      out.print( cliente.getDireccion() );
      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("      ");
 
          }
        } else { 
      
      out.write("\n");
      out.write("        <tr>\n");
      out.write("          <td colspan=\"3\">No hay clientes para mostrar.</td>\n");
      out.write("        </tr>\n");
      out.write("      ");
 } 
      out.write("\n");
      out.write("    </tbody>\n");
      out.write("  </table>\n");
      out.write("      </form>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("</f:view>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
